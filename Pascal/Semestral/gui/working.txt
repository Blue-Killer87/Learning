unit MainForm;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, Forms, Controls, Graphics, Dialogs, StdCtrls, ExtCtrls,
  ComCtrls, Menus, BackupConfig, SnapshotLogic;

type

  { TFormMain }

  TFormMain = class(TForm)
    MainMenu1: TMainMenu;
    BtnSetDest: TMenuItem;
    BtnSnapshot: TMenuItem;
    Help: TMenuItem;
    BtnAddSource: TMenuItem;
    BtnRemoveSource: TMenuItem;
    Source: TMenuItem;
    ProgressBar: TProgressBar;
    SourceDestLabel: TLabel;
    SnapshotLabel: TLabel;
    ListLog: TListBox;
    ListSnapshots: TListBox;
    MemoInfo: TMemo;

    procedure BtnAddSourceClick(Sender: TObject);
    procedure BtnRemoveSourceClick(Sender: TObject);
    procedure BtnSetDestClick(Sender: TObject);
    procedure BtnSnapshotClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure ListLogClick(Sender: TObject);
    procedure SourceClick(Sender: TObject);
    procedure SourceDestLabelClick(Sender: TObject);
    procedure ListSnapshotsClick(Sender: TObject);
  private
    procedure RefreshSnapshotList;
    procedure RefreshInfo;
    procedure LogMessage(const Msg: String);
    procedure SetProgress(Percent: Integer);
  public
  end;

var
  FormMain: TFormMain;
  ConfigPath: String = '../data/backup.ini';

implementation

{$R *.lfm}

uses
  FileUtil, IniFiles, Process;

{ TFormMain }

procedure TFormMain.FormCreate(Sender: TObject);
begin
  LoadConfig(ConfigPath);
  RefreshSnapshotList;
  RefreshInfo;

end;

procedure TFormMain.ListLogClick(Sender: TObject);
begin
  // Optional: show more details on click
end;

procedure TFormMain.SourceClick(Sender: TObject);
begin

end;


procedure TFormMain.SourceDestLabelClick(Sender: TObject);
begin
  // Optional: expand/collapse info
end;

procedure TFormMain.RefreshSnapshotList;
var
  Snapshots: TStringList;
  i: Integer;
begin
  ListSnapshots.Items.Clear;
  Snapshots := GetSnapshotList;
  try
    for i := 0 to Snapshots.Count - 1 do
      ListSnapshots.Items.Add(Snapshots[i]);
  finally
    Snapshots.Free;
  end;
end;

procedure TFormMain.RefreshInfo;
var
  i: Integer;
begin
  MemoInfo.Clear;
  MemoInfo.Lines.Add('Sources:');
  for i := 0 to High(SourceDirs) do
    MemoInfo.Lines.Add('  ' + SourceDirs[i]);
  MemoInfo.Lines.Add('');
  MemoInfo.Lines.Add('Destination:');
  MemoInfo.Lines.Add('  ' + DestinationDir);
end;

procedure TFormMain.LogMessage(const Msg: String);
begin
  ListLog.Items.Add(FormatDateTime('hh:nn:ss', Now) + ' - ' + Msg);
  ListLog.TopIndex := ListLog.Count - 1; // Scroll to last
end;

procedure TFormMain.SetProgress(Percent: Integer);
begin
  ProgressBar.Position := Percent;
  Application.ProcessMessages; // Force redraw
end;

procedure TFormMain.BtnAddSourceClick(Sender: TObject);
var
  Dir: String;
begin
  if SelectDirectory('Select Source Directory', '', Dir) then
  begin
    AddSources(ConfigPath, [Dir]);
    LoadConfig(ConfigPath);
    RefreshInfo;
    LogMessage('Added source: ' + Dir);
  end;
end;


procedure TFormMain.BtnRemoveSourceClick(Sender: TObject);
var
  Dir: String;
begin
  if InputQuery('Remove Source', 'Enter exact source path to remove:', Dir) then
  begin
    RemoveSources(ConfigPath, [Dir]);
    LoadConfig(ConfigPath);
    RefreshInfo;
    LogMessage('Removed source: ' + Dir);
  end;
end;

procedure TFormMain.BtnSetDestClick(Sender: TObject);
var
  Dir: String;
begin
  if SelectDirectory('Select Destination Directory', '', Dir) then
  begin
    SetDestination(ConfigPath, Dir);
    LoadConfig(ConfigPath);
    RefreshInfo;
    LogMessage('Destination set to: ' + Dir);
  end;
end;

procedure TFormMain.BtnSnapshotClick(Sender: TObject);
var
  i, Total: Integer;
begin
  ProgressBar.Visible:=True;
  LogMessage('Creating snapshot...');
  SetProgress(0);

  Total := Length(SourceDirs);
  if Total > 0 then
  begin
    for i := 0 to Total - 1 do
    begin
      LogMessage('Saving source: ' + SourceDirs[i]);
      Sleep(200); // Optional simulation delay
      SetProgress(Round((i) / Total * 100));
    end;
  end;

  CreateSnapshot;
  LogMessage('Snapshot completed.');
  SetProgress(100);
  sleep(500);
  ProgressBar.Visible:=False;


  RefreshSnapshotList;
end;

procedure TFormMain.ListSnapshotsClick(Sender: TObject);
var
  Selected: String;
begin
  if ListSnapshots.ItemIndex >= 0 then
  begin
    Selected := ListSnapshots.Items[ListSnapshots.ItemIndex];
    if MessageDlg('Delete snapshot "' + Selected + '"?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
    begin
      DeleteSnapshot(Selected);
      LogMessage('Deleted snapshot: ' + Selected);
      RefreshSnapshotList;
    end;
  end;
end;

end.